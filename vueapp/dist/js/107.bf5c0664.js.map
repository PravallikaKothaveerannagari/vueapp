{"version":3,"file":"js/107.bf5c0664.js","mappings":"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","sources":["webpack://vueapp/./src/core/userRecords.js","webpack://vueapp/./src/view/TimeSelector.vue","webpack://vueapp/./src/view/TimeSelector.vue?4355","webpack://vueapp/./src/components/MainTable.vue","webpack://vueapp/./src/components/MainTable.vue?8e72"],"sourcesContent":["import { reactive } from \"vue\";\r\nimport { friendList, groupList, user } from \"./userInfo\";\r\nimport { todayDate, shortMonthNames } from \"./month\";\r\n\r\nvar records = reactive([]);\r\n\r\nlet recordOnServer = [{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate() - 1,\r\n    selectedObject: \"John\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\",\r\n    \r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate(),\r\n    selectedObject: \"John\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate(),\r\n    selectedObject: \"John\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate() + 1,\r\n    selectedObject: \"John\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate() + 1,\r\n    selectedObject: \"Friend1\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate() + 1,\r\n    selectedObject: \"Friend1\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate() + 1,\r\n    selectedObject: \"Friend2\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: false,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n},\r\n{\r\n    selectedYear: 2024,\r\n    selectedMonth: 3,\r\n    selectedDay: todayDate.getDate() + 1,\r\n    selectedObject: \"Group1\",\r\n    Creator: \"Osminogka\",\r\n    yourSelf: false,\r\n    showGroupList: true,\r\n    hour: 12,\r\n    minute: 30,\r\n    recordName: \"Meeting\",\r\n    recordContent: \"Discuss the project plan\"\r\n}\r\n]\r\n\r\nexport const getRecords = (date) => {\r\n    let startDay = Math.min(date, todayDate.getDate());\r\n    let endDay = Math.max(date, todayDate.getDate());\r\n    return records.filter(record => record.selectedMonth === todayDate.getMonth() + 1 && record.selectedYear === todayDate.getFullYear() \r\n        && (todayDate.getDate() == date? record.selectedDay === date : record.selectedDay > startDay && record.selectedDay < endDay));\r\n}\r\n\r\nexport const getCertainRecord = async (date) =>  {\r\n    let selectedMonth = shortMonthNames.indexOf(date.month) + 1;\r\n    let selectedDay = date.day;\r\n    let selectedYear = date.year;\r\n    if(date.all)\r\n        return recordOnServer.filter(record => record.selectedDay === selectedDay && record.selectedMonth === selectedMonth && record.selectedYear === selectedYear);\r\n    if(date.isGroup)\r\n        return recordOnServer.filter(record => record.selectedDay === selectedDay && record.selectedMonth === selectedMonth && record.selectedYear === selectedYear \r\n            && record.showGroupList === true && record.selectedObject === date.name);\r\n    if(date.isFriend)\r\n        return recordOnServer.filter(record => record.selectedDay === selectedDay && record.selectedMonth === selectedMonth && record.selectedYear === selectedYear \r\n            && record.showGroupList === false && record.selectedObject === date.name);\r\n}\r\n\r\nexport const getRecordsWithFriend = (friendName) => {\r\n    if(friendList.value.some(obj => obj.name === friendName)) \r\n        return {\r\n            isFriend: true,\r\n            records: [...recordOnServer.filter(record => (record.selectedObject === friendName  || record.Creator === friendName) && record.yourSelf === false && record.showGroupList === false)]\r\n        };\r\n    else\r\n        return {\r\n            isFriend: false,\r\n            records: []\r\n        };\r\n}\r\n\r\nexport const getRecordsWithGroup = (groupName) => {\r\n    if(groupList.value.some(obj => obj.name === groupName)) \r\n        return {\r\n            isMember: true,\r\n            isCreator: groupList.value.find(obj => obj.name === groupName).creator === user.value.name,\r\n            Creator: groupList.value.find(obj => obj.name === groupName).creator,\r\n            members: ['test1', 'test2', 'test3'],\r\n            records: recordOnServer.filter(record => record.selectedObject === groupName && record.showGroupList === true)\r\n        };\r\n    else\r\n        return {\r\n            isMember: false,\r\n            isCreator: false,\r\n            members: [],\r\n            records: []\r\n        };\r\n}\r\n\r\nexport const getRecordsFromServer = (recordsInfo) =>{\r\n    if(recordsInfo.all)\r\n        records = recordOnServer;\r\n    if(recordsInfo.isGroup)\r\n        records = recordOnServer.filter(record => record.yourSelf === false && record.showGroupList === true && record.selectedObject === recordsInfo.name);\r\n    if(recordsInfo.isFriend)\r\n        records = recordOnServer.filter(record => record.yourSelf === false && record.showGroupList === false && record.selectedObject === recordsInfo.name);\r\n}\r\n\r\nexport const postRecord = (record) => {\r\n    let erroList = isRecordValid(record);\r\n    if(erroList.length === 0) {\r\n        record.Creator = user.value.name;\r\n        record.selectedMonth += 1;\r\n        recordOnServer.push(record);\r\n        return [];\r\n    } else {\r\n        return erroList;\r\n    }\r\n}\r\n\r\nfunction isRecordValid (record) {\r\n    let errorList = [];\r\n\r\n    if (!(todayDate.getFullYear() - 10 <= record.selectedYear && record.selectedYear <= todayDate.getFullYear() + 10)) {\r\n        errorList.push('selectedYear');\r\n    }\r\n    // Check if selectedDay is a valid day\r\n    if (!(1 <= record.selectedDay && record.selectedDay <= new Date(record.selectedYear, record.selectedMonth + 1, 0).getDate())) {\r\n        errorList.push('selectedDay');\r\n    }\r\n    // Check if selectedMonth is a valid month\r\n    if (!(0 <= record.selectedMonth && record.selectedMonth <= 11)) {\r\n        errorList.push('selectedMonth');\r\n    }\r\n    // Check if selectedObject is a valid object\r\n    if (record.yourSelf? !(record.selectedObject == user.value.name) \r\n        : record.showGroupList ? !groupList.value.some(obj => obj.name === record.selectedObject) : !friendList.value.some(obj => obj.name === record.selectedObject)) {\r\n        errorList.push('selectedObject');\r\n    }\r\n    // Check if hour is a valid hour\r\n    if (!(0 <= parseInt(record.hour) && parseInt(record.hour) <= 23)) {\r\n        errorList.push('hour');\r\n    }\r\n    // Check if minute is a valid minute\r\n    if (!(0 <= parseInt(record.minute) && parseInt(record.minute) <= 59)) {\r\n        errorList.push('minute');\r\n    }\r\n    // Check if recordName is not empty\r\n    if (record.recordName.length <= 0 || record.recordName.length > 50) {\r\n        errorList.push('recordName');\r\n    }\r\n    // Check if recordContent is not empty\r\n    if (record.recordContent.length <= 0 || record.recordContent.length > 500) {\r\n        errorList.push('recordContent');\r\n    }\r\n\r\n    return errorList;\r\n}","<script setup>\r\nimport { defineProps, defineModel} from 'vue';\r\n\r\ndefineProps({\r\n    type: String,\r\n    error: Boolean,\r\n});\r\n\r\nconst model = defineModel();\r\n</script>\r\n\r\n<template>\r\n    <div v-if=\"type === 'hour'\">\r\n        <label class=\"custom-label\">Hour</label>\r\n        <p class=\"error-message\" v-if=\"error\">Invalid hour</p>\r\n        <input class=\"input-time\" :class=\"{'error-input':error}\" type=\"number\" v-model=\"model\" min=\"0\" max=\"23\" step=\"1\" placeholder=\"Hour\"/>\r\n    </div>\r\n    <div v-else-if=\"type === 'minute'\">\r\n        <label class=\"custom-label\">Minute</label>\r\n        <p class=\"error-message\" v-if=\"error\">Invalid minute</p>\r\n        <input class=\"input-time\" :class=\"{'error-input':error}\" type=\"number\" v-model=\"model\" min=\"0\" max=\"59\" step=\"1\" placeholder=\"Minute\"/>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n.input-time{\r\n    display: block;\r\n    background-color: #55FFEF;\r\n    border-style: solid;\r\n    border-color: black;\r\n    border-radius: 0.5em;\r\n    border-width: 0.15em;\r\n    padding: 0.5em;\r\n}\r\n\r\n.input-time::-webkit-inner-spin-button,\r\n.input-time::-webkit-outer-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n.input-time {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n</style>","import script from \"./TimeSelector.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TimeSelector.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TimeSelector.vue?vue&type=style&index=0&id=059800a8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-059800a8\"]])\n\nexport default __exports__","<script setup>\r\nimport('../assets/css/table.css')\r\nimport('../assets/css/mainForm.css')\r\nimport('../assets/css/user.css')\r\nimport('../assets/css/customSelect.css')\r\n\r\nimport TimeSelector from '@/view/TimeSelector.vue'\r\n\r\nimport { friendList, groupList, user} from '../core/userInfo'\r\nimport {todayDate, monthNames} from '../core/month'\r\nimport { postRecord } from '@/core/userRecords';\r\n\r\nimport {ref, computed, reactive, toRaw } from 'vue';\r\n\r\nconst recordCreationStatus = reactive({\r\n    status: true,\r\n    message: '',\r\n    showMessage: false\r\n})\r\n\r\nasync function submitForm() {\r\n    let result = postRecord({...toRaw(recordCreationForm)});\r\n    for(let key in errorList) \r\n        errorList[key].error = false;\r\n    if(result.length > 0){\r\n        for(let key of result) \r\n            errorList[key].error = true;\r\n        recordCreationStatus.showMessage = true;\r\n        recordCreationStatus.message = 'Record creation failed!';\r\n        recordCreationStatus.status = false;\r\n        clearInputs(false);\r\n    }\r\n    else{\r\n        recordCreationStatus.showMessage = true;\r\n        recordCreationStatus.message = 'Record created successfully!';\r\n        recordCreationStatus.status = true;\r\n        clearInputs(true);\r\n    }\r\n    setTimeout(() => {\r\n        recordCreationStatus.showMessage = false;\r\n    }, 3000);\r\n}\r\n\r\nfunction clearInputs(wasSuccessful) {\r\n    for (let key in errorList) {\r\n        let errorProp = errorList[key];\r\n        if(wasSuccessful){\r\n            errorProp.error = false;\r\n            if(key !== 'selectedObject')\r\n                recordCreationForm[key] = errorProp.default;\r\n        }\r\n        if(errorProp.error && !wasSuccessful)\r\n            recordCreationForm[key] = errorProp.default;\r\n    }\r\n}\r\n\r\n\r\nconst importanceList = [\r\n    { name: 'Low', value: 0 },\r\n    { name: 'Medium', value: 1 },\r\n    { name: 'High', value: 2 }\r\n];\r\n\r\nconst recordCreationForm = reactive({\r\n    selectedYear: todayDate.getFullYear(),\r\n    selectedDay: 1,\r\n    selectedMonth: todayDate.getMonth(),\r\n    showGroupList: false,\r\n    yourSelf: false,\r\n    selectedObject: friendList.value[0].name,\r\n    importance: 0,\r\n    enterTime: false,\r\n    hour: 0,\r\n    minute: 0,\r\n    recordName: '',\r\n    recordContent: '',\r\n    showObjectList: false,\r\n    showImportanceList: false\r\n});\r\n\r\nconst errorList = reactive({\r\n    selectedYear: {\r\n        error: false,\r\n        message: 'Invalid year',\r\n        default: todayDate.getFullYear()\r\n    },\r\n    selectedDay: {\r\n        error: false,\r\n        message: 'Invalid day',\r\n        default: 1\r\n    },\r\n    selectedMonth: {\r\n        error: false,\r\n        message: 'Invalid month',\r\n        default: todayDate.getMonth()\r\n    },\r\n    selectedObject: {\r\n        error: false,\r\n        message: 'Invalid person selected',\r\n    },\r\n    hour: {\r\n        error: false,\r\n        message: 'Invalid hour',\r\n        default: 0\r\n    },\r\n    minute: {\r\n        error: false,\r\n        message: 'Invalid minute',\r\n        default: 0\r\n    },\r\n    recordName: {\r\n        error: false,\r\n        message: recordCreationForm.recordName.length <= 0 ? 'Record name is too short' : 'Record name is too long',\r\n        default: ''\r\n    },\r\n    recordContent: {\r\n        error: false,\r\n        message: recordCreationForm.recordContent <= 0 ? 'Record content is too long' : 'Record content is too short',\r\n        default: ''\r\n    }\r\n});\r\n\r\nlet currentYear = todayDate.getFullYear();\r\nlet daysInMonth = ref(new Date(currentYear, todayDate.getMonth() + 1, 0).getDate());\r\nlet firstDayOfMonth = ref(new Date(currentYear, todayDate.getMonth(), 1).getDay() - 1);\r\n\r\nlet selectedMonthName = computed(() => monthNames[recordCreationForm.selectedMonth]);\r\nlet selectedYear = computed(() => recordCreationForm.selectedYear !== todayDate.getFullYear() ? recordCreationForm.selectedYear : '');\r\n\r\nlet isTodayDate = (day) => {\r\n    return day === todayDate.getDate() && todayDate.getMonth() === recordCreationForm.selectedMonth;\r\n}\r\n\r\nfunction toggleObjectList() {\r\n    if(recordCreationForm.showImportanceList)\r\n        recordCreationForm.showImportanceList = false;\r\n    recordCreationForm.showObjectList = !recordCreationForm.showObjectList;\r\n}\r\nfunction selectObjectList(option) {\r\n    recordCreationForm.selectedObject = option;\r\n}\r\n\r\nfunction selectObjectType(option) {\r\n    if(option === 'Group'){\r\n        recordCreationForm.showGroupList = !recordCreationForm.showGroupList;\r\n        recordCreationForm.yourSelf = false;\r\n        recordCreationForm.selectedObject = recordCreationForm.showGroupList? groupList.value[0].name : friendList.value[0].name;\r\n    }\r\n    else{\r\n        recordCreationForm.yourSelf = !recordCreationForm.yourSelf;\r\n        recordCreationForm.showGroupList = false;\r\n        recordCreationForm.selectedObject = recordCreationForm.yourSelf? user.value.name : friendList.value[0].name;\r\n    }\r\n}\r\n\r\nfunction toggleImportance() {\r\n    recordCreationForm.showImportanceList = !recordCreationForm.showImportanceList;\r\n}\r\n\r\nfunction selectImportance(option) {\r\n    recordCreationForm.importance = importanceList.find(item => item.name === option).value;\r\n}\r\n\r\nlet animateCell = (event) => {\r\n    let button = event.target;\r\n    button.classList.add('animate');\r\n    setTimeout(() => {\r\n        button.classList.remove('animate');\r\n        recordCreationForm.selectedDay = parseInt(event.target.textContent);\r\n    }, 300);\r\n}\r\n\r\nlet animateArrow = (monthChange) => {\r\n    recordCreationForm.selectedDay = 1;\r\n    if(recordCreationForm.selectedMonth + monthChange < 0) {\r\n        recordCreationForm.selectedMonth = 11;\r\n        recordCreationForm.selectedYear--;\r\n    } else if(recordCreationForm.selectedMonth + monthChange > 11) {\r\n        recordCreationForm.selectedMonth = 0;\r\n        recordCreationForm.selectedYear++;\r\n    } else\r\n        recordCreationForm.selectedMonth += monthChange;\r\n    daysInMonth.value = new Date(recordCreationForm.selectedYear, recordCreationForm.selectedMonth + 1, 0).getDate();\r\n    firstDayOfMonth.value = new Date(recordCreationForm.selectedYear, recordCreationForm.selectedMonth , 1).getDay() - 1;\r\n    let button = event.target;\r\n    button.classList.add('animate');\r\n    setTimeout(() => {\r\n        button.classList.remove('animate');\r\n    }, 300);\r\n}\r\n\r\nconst weeks = computed(() => {\r\n    let weeks = [];\r\n    let week = [];\r\n    let day = 1;\r\n\r\n  // Fill the first week of the month with empty days until the first day of the month\r\n    for (let i = 0; i < 7; i++) {\r\n        if (i < firstDayOfMonth.value) {\r\n            week.push(null);\r\n        } else {\r\n            week.push(day++);\r\n        }\r\n    }\r\n    weeks.push(week);\r\n\r\n// Fill the rest of the weeks\r\n    while (day <= daysInMonth.value) {\r\n        week = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            if(day <= daysInMonth.value)\r\n                week.push(day++);\r\n            else\r\n                week.push(null);\r\n        }\r\n        weeks.push(week);\r\n    }\r\n    return weeks;\r\n});\r\n</script>\r\n\r\n<template>\r\n    <div class=\"container\">\r\n        <div class=\"table-container\">\r\n            <p class=\"month-header\">{{ selectedMonthName }} <span v-if=\"selectedYear\">{{ selectedYear }}</span></p>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Mon</th>\r\n                        <th>Tue</th>\r\n                        <th>Wed</th>\r\n                        <th>Thu</th>\r\n                        <th>Fri</th>\r\n                        <th>Sat</th>\r\n                        <th>Sun</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"(week, index) in weeks\" :key=\"index\">\r\n                        <td v-for=\"(day, index) in week\" :key=\"index\" \r\n                            :class=\"{ 'td-today': isTodayDate(day), 'td-common-day':!isTodayDate(day), 'td-null-day': day === null }\">\r\n                                <button v-if=\"day !== null\" @click=\"animateCell\" class=\"button-cell\" \r\n                                    :class=\"{'button-cell-current-day':isTodayDate(day), 'button-cell-selected': day == recordCreationForm.selectedDay}\">\r\n                                    {{ day }}\r\n                                </button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <div class=\"arrow-container\">\r\n                <button @click=\"animateArrow(-1)\" class=\"left-arrow custom-button arrow\" />\r\n                <button @click=\"animateArrow(1)\" class=\"right-arrow custom-button arrow\" />\r\n            </div>\r\n        </div>\r\n        <form class=\"form-for-record\">\r\n            <p class=\"p-selected-day\">Selected day: {{ recordCreationForm.selectedDay }}</p>\r\n            <div class=\"checkbox-container\">\r\n                <div id=\"input-checkbox\" :class=\"{'input-checkbox-checked': recordCreationForm.showGroupList}\" class=\"input-checkbox\" \r\n                    @click=\"selectObjectType('Group')\"></div>\r\n                <label class=\"label-checkbox\">For Group</label>\r\n                <div id=\"input-checkbox-yourself\" :class=\"{ 'input-checkbox-checked': recordCreationForm.yourSelf }\" class=\"input-checkbox\" \r\n                    @click=\"selectObjectType('Yourself')\" style=\"margin-left: 1em;\"></div>\r\n                <label class=\"label-checkbox\">Yourself</label>\r\n            </div>\r\n            <p class=\"error-message\" v-if=\"errorList.selectedObject.error\">{{ errorList.selectedObject.message }}</p>\r\n            <Transition name=\"showTimeEnter\">\r\n                <div v-if=\"!recordCreationForm.yourSelf\" class=\"aselect\" :data-value=\"recordCreationForm.selectedObject\" :data-list=\"recordCreationForm.showGroupList? groupList : friendList\">\r\n                    <div :class=\"{'error-input': errorList.selectedObject.error }\" class=\"selector\" @click=\"toggleObjectList()\">\r\n                        <div class=\"label\">\r\n                            <span>{{ recordCreationForm.selectedObject }}</span>\r\n                        </div>\r\n                        <div class=\"arrow-select\" :class=\"{ expanded : recordCreationForm.showObjectList }\"></div>\r\n                        <Transition name=\"fadey\">\r\n                            <div v-if=\"recordCreationForm.showObjectList\">\r\n                                <ul>\r\n                                    <li :class=\"{ current : item === value }\" v-for=\"(item, index) in recordCreationForm.showGroupList? groupList : friendList\" \r\n                                    @click=\"selectObjectList(item.name)\" :key=\"index\">\r\n                                        {{ item.name }}\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </Transition>\r\n                    </div>\r\n                </div>\r\n            </Transition>\r\n            <label class=\"custom-label\">Select importance</label>\r\n            <div class=\"aselect\" :data-value=\"recordCreationForm.importance\" :data-list=\"importanceList.name\">\r\n                <div class=\"selector\" @click=\"toggleImportance()\">\r\n                    <div class=\"label\">\r\n                        <span>{{ importanceList.find(item => item.value === recordCreationForm.importance).name }}</span>\r\n                    </div>\r\n                    <div class=\"arrow-select\" :class=\"{ expanded : recordCreationForm.showImportanceList }\"></div>\r\n                    <Transition name=\"fadey\">\r\n                        <div v-if=\"recordCreationForm.showImportanceList\">\r\n                            <ul>\r\n                                <li :class=\"{ current : item === value }\" v-for=\"(item, index) in importanceList\" \r\n                                @click=\"selectImportance(item.name)\" :key=\"index\">\r\n                                    {{ item.name }}\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </Transition>\r\n                </div>\r\n            </div>\r\n            <div class=\"checkbox-container checkbox-container-time\">\r\n                <div id=\"input-checkbox\" :class=\"{'input-checkbox-checked': recordCreationForm.enterTime}\" class=\"input-checkbox\" @click=\"recordCreationForm.enterTime = !recordCreationForm.enterTime\"></div>\r\n                <label class=\"label-checkbox\">Enter Time</label>\r\n            </div>\r\n            <Transition name=\"showTimeEnter\">\r\n                <div v-if=\"recordCreationForm.enterTime\">\r\n                    <time-selector v-model=\"recordCreationForm.hour\" type=\"hour\" :error=\"errorList.hour.error\"/>\r\n                    <time-selector v-model=\"recordCreationForm.minute\" type=\"minute\" :error=\"errorList.minute.error\"/>\r\n                </div>\r\n            </Transition>\r\n            <div>\r\n                <label class=\"custom-label\">Record Name</label>\r\n                <p class=\"error-message\" v-if=\"errorList.recordName.error\">{{ errorList.recordName.message }}</p>\r\n                <input class=\"input-form\" :class=\"{'error-input':errorList.recordName.error}\" type=\"text\" v-model=\"recordCreationForm.recordName\" />\r\n                <label class=\"custom-label\">Record Content</label>\r\n                <p class=\"error-message\" v-if=\"errorList.recordContent.error\">{{ errorList.recordContent.message }}</p>\r\n                <textarea class=\"textarea-form input-record-content\" :class=\"{'error-input': errorList.recordContent.error}\"  v-model=\"recordCreationForm.recordContent\"></textarea>\r\n            </div>\r\n            <button @click.prevent=\"submitForm\" class=\"submit-button\">Create Record</button>\r\n            <Transition name=\"showTimeEnter\">\r\n                <p class=\"creation-status\" :class=\"{'creation-successful': recordCreationStatus.status, 'creation-failed': !recordCreationStatus.status}\" v-if=\"recordCreationStatus.showMessage\">{{ recordCreationStatus.message }}</p>\r\n            </Transition>\r\n        </form>\r\n    </div>\r\n</template>","import script from \"./MainTable.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MainTable.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["records","reactive","recordOnServer","selectedYear","selectedMonth","selectedDay","todayDate","getDate","selectedObject","Creator","yourSelf","showGroupList","hour","minute","recordName","recordContent","getRecords","date","startDay","Math","min","endDay","max","filter","record","getMonth","getFullYear","getCertainRecord","async","shortMonthNames","indexOf","month","day","year","all","isGroup","name","isFriend","getRecordsWithFriend","friendName","friendList","value","some","obj","getRecordsWithGroup","groupName","groupList","isMember","isCreator","find","creator","user","members","getRecordsFromServer","recordsInfo","postRecord","erroList","isRecordValid","length","push","errorList","Date","parseInt","model","_useModel","__props","__exports__","recordCreationStatus","status","message","showMessage","submitForm","result","toRaw","recordCreationForm","key","error","clearInputs","setTimeout","wasSuccessful","errorProp","default","importanceList","importance","enterTime","showObjectList","showImportanceList","currentYear","daysInMonth","ref","firstDayOfMonth","getDay","selectedMonthName","computed","monthNames","isTodayDate","toggleObjectList","selectObjectList","option","selectObjectType","toggleImportance","selectImportance","item","animateCell","event","button","target","classList","add","remove","textContent","animateArrow","monthChange","weeks","week","i"],"sourceRoot":""}